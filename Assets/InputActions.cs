//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Palyer"",
            ""id"": ""1203d522-25cd-430a-8f18-fb90b81528cd"",
            ""actions"": [
                {
                    ""name"": ""BoardRotation"",
                    ""type"": ""Value"",
                    ""id"": ""de5041ea-24f5-4cc6-9427-8c75e0d74f79"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a4b26bb-699c-4236-b76b-55031b97e6c9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoardRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""004ff7c5-a214-4e10-b039-2248561a4812"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoardRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""10cf7458-4cc4-4a5d-8652-7e8e79958c48"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoardRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""81ad3d9a-f5ea-4f37-9fe4-d8ac89ddc9f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoardRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e576a06a-c89f-4d78-96b4-c0a21503a30e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoardRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e3d713c9-f39e-40d3-9660-c2a81bc421bf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoardRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Palyer
        m_Palyer = asset.FindActionMap("Palyer", throwIfNotFound: true);
        m_Palyer_BoardRotation = m_Palyer.FindAction("BoardRotation", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Palyer.enabled, "This will cause a leak and performance issues, InputActions.Palyer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Palyer
    private readonly InputActionMap m_Palyer;
    private List<IPalyerActions> m_PalyerActionsCallbackInterfaces = new List<IPalyerActions>();
    private readonly InputAction m_Palyer_BoardRotation;
    public struct PalyerActions
    {
        private @InputActions m_Wrapper;
        public PalyerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BoardRotation => m_Wrapper.m_Palyer_BoardRotation;
        public InputActionMap Get() { return m_Wrapper.m_Palyer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PalyerActions set) { return set.Get(); }
        public void AddCallbacks(IPalyerActions instance)
        {
            if (instance == null || m_Wrapper.m_PalyerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PalyerActionsCallbackInterfaces.Add(instance);
            @BoardRotation.started += instance.OnBoardRotation;
            @BoardRotation.performed += instance.OnBoardRotation;
            @BoardRotation.canceled += instance.OnBoardRotation;
        }

        private void UnregisterCallbacks(IPalyerActions instance)
        {
            @BoardRotation.started -= instance.OnBoardRotation;
            @BoardRotation.performed -= instance.OnBoardRotation;
            @BoardRotation.canceled -= instance.OnBoardRotation;
        }

        public void RemoveCallbacks(IPalyerActions instance)
        {
            if (m_Wrapper.m_PalyerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPalyerActions instance)
        {
            foreach (var item in m_Wrapper.m_PalyerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PalyerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PalyerActions @Palyer => new PalyerActions(this);
    public interface IPalyerActions
    {
        void OnBoardRotation(InputAction.CallbackContext context);
    }
}
